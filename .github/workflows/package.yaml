name: CI
on:
  push:
    branches: [main, dev]
  workflow_dispatch:

jobs:
  acceptance-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install dependencies
        run: npm ci
        env:
          NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Check Code Standards
        run: npm run check

      - name: Unit Test
        run: |
          npm test
          npm test -w lambdas 

      - name: Archive coverage artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: |
            coverage

  # generate-package:
  #   needs: acceptance-test
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v3

  #     - name: Setup node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 18.x

  #     - name: Git config
  #       run: |
  #         git config --global user.name 'ðŸ¤–'
  #         git config --global user.email 'ðŸ¤–'
  #     - name: Bump version
  #       id: version-bump
  #       uses: actions/checkout@v3
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Bump patch version
  #       if: endsWith(github.ref, '/main')
  #       run: echo "version=$(npm version patch -m 'Bump version v%s [skip ci]')" >> $GITHUB_ENV

  #     - name: Bump prepatch version
  #       if: endsWith(github.ref, '/dev')
  #       run: echo "version=$(npm version prerelease -m 'Bump version v%s [skip ci]')" >> $GITHUB_ENV

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Build
  #       run: npm run build

  #     - name: Archive build artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: lib
  #         path: |
  #           dist
  #           package*.json
  #     - run: npm publish
  #       env:
  #         NPM_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Git Push
  #       run: |
  #         git push
  #         git push --tags

  # generate-docs:
  #   needs: generate-package
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v3

  #     - name: Setup node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 18.x

  #     - name: Install dependencies
  #       run: npm install

  #     - name: Generate Documentation
  #       run: npm run doc

  #     - name: Archive documentation artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: docs
  #         path: |
  #           docs

  # create-release:
  #   needs: generate-package
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v3

  #     - name: Setup node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 18.x

  #     - name: Set version
  #       id: vars
  #       shell: bash
  #       run: |
  #         git fetch -a
  #         echo "RELEASE_TAG=$(git tag --sort=committerdate | tail -1)" >> $GITHUB_ENV
  #     - name: Create release
  #       uses: 'actions/github-script@v6'
  #       env:
  #         RELEASE_TAG: ${{ env.RELEASE_TAG }}
  #       with:
  #         github-token: '${{ secrets.GITHUB_TOKEN }}'
  #         script: |
  #           try {
  #             await github.rest.repos.createRelease({
  #               draft: false,
  #               generate_release_notes: true,
  #               name: process.env.RELEASE_TAG,
  #               owner: context.repo.owner,
  #               prerelease: process.env.RELEASE_TAG.includes('-') ? true : false,
  #               repo: context.repo.repo,
  #               tag_name: process.env.RELEASE_TAG,
  #             });
  #           } catch (error) {
  #             core.setFailed(error.message);
  #           }
